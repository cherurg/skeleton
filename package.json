{
  "name": "sheckley",
  "version": "0.3.0hack",
  "description": "Сейчас скелетон еще разрабатывается, поэтому я не могу обещать, что интерфейс сохранится в следующих коммитах.\r Эта документация **актуальна для версии 0.0.5**. Проверить версию можно так: `Plotter.version`",
  "main": "dist/js/plot.js",
  "scripts": {
    "test": "mocha --compilers js:babel/register --require ./test/test_helper.js --recursive",
    "server": "python -m SimpleHTTPServer 8000",
    "test:watch": "npm test -- --watch"
  },
  "author": {
    "name": "Alexey Karpov",
    "email": "KarpovAD@yandex.ru"
  },
  "license": "ISC",
  "devDependencies": {
    "babel": "^5.8.23",
    "babel-core": "^5.8.25",
    "babel-loader": "^5.3.2",
    "browser-sync": "~1.3.6",
    "chai": "^3.3.0",
    "coffee-loader": "^0.7.2",
    "coffee-script": "^1.8.0",
    "concat": "^1.0.0",
    "jsdom": "^6.5.1",
    "mocha": "^2.3.3",
    "pretty-hrtime": "~0.2.1",
    "require-dir": "^0.1.0",
    "should": "^4.3.0",
    "socket.io": "^1.3.5",
    "vinyl-source-stream": "~0.1.1",
    "watchify": "~1.0.2",
    "webpack": "^1.12.2",
    "yargs": "^1.3.3"
  },
  "dependencies": {
    "event-emitter": "^0.3.1",
    "lodash": "^2.4.1",
    "socket.io-client": "^1.3.5"
  },
  "readme": "Сейчас скелетон еще разрабатывается, поэтому я не могу обещать, что интерфейс сохранится в следующих коммитах.\r\nЭта документация **актуальна для версии 0.0.5**. Проверить версию можно так: `Plotter.version`\r\n\r\n`Plotter` -- основной объект. Он отвечает за прорисовку графика и всех объектов, которые на нем находятся.\r\nДля создания графика нужно передать в качестве первого аргумента в конструктор `Plotter` id DOM-элемента, где дальше будет отрисовываться график. \r\n```javascript\r\nvar plotter = new Plotter(\"plot\", options);\r\n```\r\n\r\nВторой *необязательный* аргумент конструктора `Plotter` `options` -- это объект, в котором можно менять некоторые свойства `Plotter`. Вот они, а также их значения по-умолчанию:\r\n  * **left: -10**, левая граница графика\r\n  * **right: 10**, правая граница графика\r\n  * **bottom: -5**, нижняя граница графика\r\n  * **top: 5**, верхняя граница графика\r\n  * **width: 800**, ширина графика в пикселях\r\n  * **height: 600**, высота графика в пикселях\r\n  * **stroke: \"#000000\"**, цвет рамки графика\r\n\r\nЕсть еще несколько других свойств, которые я намеренно не перечисляю. Какие-то из них лучше не трогать, а изменение других может привести к падению программы.\r\n\r\n\r\nФункции-рисовалки -- главное, что есть у `Plotter`, и основная фишка библиотеки. С помощью них можно много рисовать, но писать мало кода. Пример вызова функции, которая нарисует график sin(x):\r\n```javascript\r\nvar func = plotter.addFunc(function (x) {\r\n    return Math.sin(x);\r\n}, options);\r\n```\r\n\r\nСуществуют методы для добавления закрашенной области, линии, точки и функции. Каждый метод возвращает объект. у которого есть методя для его модификации. Например, `Plotter.addFunc` вернет объект функции, у которого можно будет поменять цвет, границы прорисовки, точность, толщину, точки разрыва и даже саму функцию. \r\n\r\n### Методы Plotter\r\nО конструкторе Plotter я уже рассказал.Теперь я расскажу о том, что делать с объектом, которые возвращает конструктор. У него есть несколько методов:\r\n\r\n\r\n##### Plotter.addFunc(Function, Object)\r\nПервый аргумент - это функция, которую нужно нарисовать. Второй *необязательный* аргумент - это объект, в котором можно менять некоторые свойства.\r\n*  **accuracy: Plotter.width**, точность прорисовки графика. По-умолчанию равна ширине графика в пикселях. Количество точек, по которым строится график.\r\n*  **strokeWidth: 2**, толщина линии графика\r\n*  **color: 0**, цвет. Нулевой цвет -- это синий.  Если менять это свойство вручную, без вызова метода setColor, то нужно указывать цвет в формате rgb. Первый символ должен быть решеткой, а дальше следуют 6 шестнадцатиричныных цирф: `\"#FF0000\"` - красный. Лучше не менять это свойство напрямую, а использовать сеттер, так как в нем можно выбрать цвет из заранее заданного набора.\r\n*  **breaks: []**, массив точек разрыва. Когда строится график функции, у которой есть разрывы, то здесь их нужно указать. Например, у графика сигнума точкой разрыва будет 0. Такая же точка разрыва будет у гиперболы и у графика sin(x)/x.\r\n*  **left: null**, левая граница прорисовки. Левее нее график никогда не будет рисоваться. `null` означает, что границы нет.\r\n*  **right: null**, правая граница прорисовки. Правее нее график никогда не будет рисоваться. `null` означает, что границы нет.\r\n\r\n##### Методы Func\r\nВот построена функци и получен объект типа `Func`:\r\n```javascript\r\nvar func = plotter.addFunc(function (x) {\r\n    return x;\r\n});\r\n```\r\nМожно, например, поменять цвет:\r\n```javascript\r\nfunc.setColor(7);   //поменяет цвет на красный.\r\n```\r\nМожно получить цвет:\r\n```javascript\r\nfunc.getColor();    //\"#d62728\" -- тот, который был установлен. Цвет всегда возвращается в формате rgb.\r\n```\r\nМожно делать и то, и другое с помощью одного метода:\r\n```javacript\r\nfunc.Color(9);  //вызов .Color() с аргументом поменяет цвет. Сейчас был установлен фиолетовый.\r\nfunc.Color();   //вызов .Color() без аргументов просто вернет текущий цвет. Будет возвращен rgb-код фиолетового: \"#9467bd\".\r\n```\r\n\r\nЯ показал примеры использования методов Func. Какие вообще методы у него есть? \r\n* **Func.getAccuracy()**, вернет текущую точность прорисовки\r\n* **Func.setAccuracy(Number)**, установит указанную точность прорисовки. Число должно быть целым.\r\n* **Func.Accuracy(Number)**, если передать *необязательный* аргумент, то установит точность прорисовки. Если не указывать, то вернет текущую точность прорисовки.\r\n\r\n---\r\n\r\n* **Func.getStrokeWidth()**, вернет текущую толщину линии графика.\r\n* **Func.setStrokeWidth(Number)**, установит указанную толщину.\r\n* **Func.StrokeWidth(Number)**, если передать *необязательный* аргумент, то установит толщину. Если не указывать, то вернет текущую толщину.\r\n\r\n---\r\n\r\n* **Func.getColor()**, вернет текущий цвет в формате rgb.\r\n* **Func.setColor(Number or String)**, установит указанный цвет. Если передавать строку, то она должна быть в формате rgb, то есть первый символ - решетка, а дальше 6 шестандцатиричных цифр. Если передавать число, то оно может быть от 0 до 20 включительно. 20 соответствует черному цвету. Остальные номера соответсвуют этим цветам: https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20\r\n* **Func.Color(Number or String)**, аргумент необязателен. Если он есть, тобудет установлен указанный цвет, как в `.setColor(Number or String)`. Если его нет, то будет возвращен текущий цвет в формате rgb.\r\n\r\n---\r\n\r\n* **Func.getColour()**, алиас для `.getColor()`\r\n* **Func.setColour(Number or String)**, алиас для `.setColor(Number or String)`\r\n* **Func.Colour(Number or String)**, алиас для `.Color(Number or String)`\r\n\r\n---\r\n\r\n* **Func.getBreaks()**, вернет массив точек разрыва. Модификации в этом массиве приведут к изменениям в массиве внутри объекта. Иначе говоря, копия не создается. При необходимости копию можно создать с помощью `var newArr = _.clone(arr);`. В сборку скелетона уже включен lodash 2.4.1, набор утилит для js. Подробнее: https://lodash.com/\r\n* **Func.setBreaks(Array)**, установит указанный массив точек разрыва. Копия при этом создаваться не будет. \r\n* **Func.Breaks(Array)**, если *необязательный* аргумент указан, то установит новый массив точек разрыва. Если нет, то вернет текущий массив.\r\n\r\n---\r\n\r\n* **Func.getLeft()**, вернет левую границу прорисовки.\r\n* **Func.setLeft(Number)**, установит левую границу прорисовки.\r\n* **Func.Left(Number)**, если *необязательный* аргумент указан, то установит левую границу прорисовки. Иначе вернет текущую.\r\n\r\n---\r\n\r\n* **Func.getRight()**, вернет правую границу прорисовки.\r\n* **Func.setRight(Number)**, установит правую границу прорисовки.\r\n* **Func.Right(Number)**, если *необязательный* аргумент указан, то установит правую границу прорисовки. Иначе вернет текущую.\r\n\r\n---\r\n\r\n* **Func.getFunc()**, вернет текущую функцию.\r\n* **Func.setFunc(Function)**, установит функцию.\r\n* **Func.Func(Function)**, если аргумент указан, то установит функцию. Если нет, то вернет текущую функцию.\r\n\r\n---\r\n\r\n##### Plotter.addLine(x1, y1, x2, y2, Object)\r\nПервые четыре аргумента задают координаты двух точек, по которым будет строиться отрезок. Последний *необязательный* аргумент - это объект, в котором можно передавать опции. Слева указано имя свойства, а справа - его значение по-умолчанию.\r\n\r\n* **strokeWidth: 2**, толщина линии\r\n* **color: 0**\r\n\r\n##### Методы Line\r\n* **Line.setX1(x1)**\r\n* **Line.getX1()**\r\n* **Line.X1(x1)**, принимает *необязательный* аргумент. Если он задан, то устанавливает x1. Иначе возвращает текущее значение x1.\r\n\r\n---\r\n\r\n* **Line.setX2(x2)**\r\n* **Line.getX2()**\r\n* **Line.X2(x2)**, принимает *необязательный* аргумент. Если он задан, то устанавливает x2. Иначе возвращает текущее значение x2.\r\n\r\n---\r\n\r\n* **Line.setY1(y1)**\r\n* **Line.getY1()**\r\n* **Line.Y1(y1)**, принимает *необязательный* аргумент. Если он задан, то устанавливает y1. Иначе возвращает текущее значение y1.\r\n \r\n---\r\n\r\n* **Line.setY2(y2)**\r\n* **Line.getY2()**\r\n* **Line.Y2(y2)**, принимает *необязательный* аргумент. Если он задан, то устанавливает y2. Иначе возвращает текущее значение y2.\r\n\r\n---\r\n\r\n* **Line.getColor()**, вернет текущий цвет в формате rgb.\r\n* **Line.setColor(Number or String)**, установит указанный цвет. Если передавать строку, то она должна быть в формате rgb, то есть первый символ - решетка, а дальше 6 шестандцатиричных цифр. Если передавать число, то оно может быть от 0 до 20 включительно. 20 соответствует черному цвету. Остальные номера соответсвуют этим цветам: https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20\r\n* **Line.Color(Number or String)**, аргумент необязателен. Если он есть, тобудет установлен указанный цвет, как в `.setColor(Number or String)`. Если его нет, то будет возвращен текущий цвет в формате rgb.\r\n\r\n---\r\n\r\n* **Line.getColour()**, алиас для `.getColor()`\r\n* **Line.setColour(Number or String)**, алиас для `.setColor(Number or String)`\r\n* **Line.Colour(Number or String)**, алиас для `.Color(Number or String)`\r\n\r\n---\r\n\r\n##### Plotter.addArea(Array, Object)\r\nСтроит произвльную закрашенную область на графике. Для построения нужно передать в качестве первого аргумента массив точек. Каждая точка - это объект, у которого есть два поля: x и y.\r\n```javascript\r\n    var arr = [];\r\n    arr.push({\r\n        x: 0,\r\n        y: 0\r\n    });\r\n    arr.push({\r\n        x: 1,\r\n        y: 0\r\n    });\r\n    arr.push({\r\n        x: 0.5,\r\n        y: 1\r\n    });\r\n    var area = Plotter.addArea(arr);\r\n```\r\n\r\nВторой *необязательный* аргумент `.addLine` - объект с опциями. Можно менять следующие свойства:\r\n  * **color: 20**, цвет границы области. По-умолчанию черный.\r\n  * **fillOpacity: 0.2**, прозрачность закраски области. Может меняться от 0 до 1, где 1 - непрозрачная, а 0 - полностью прозрачная, невидимая.\r\n  * **strokeWidth: 0**, толщина границы области. По-молчанию толщина нулевая, то есть граница невидимая\r\n  * **fill: 1**, цвет закраски области.\r\n  \r\n##### Методы Area\r\n* **Area.getColor()**, вернет текущий цвет в формате rgb.\r\n* **Area.setColor(Number or String)**, установит указанный цвет. Если передавать строку, то она должна быть в формате rgb, то есть первый символ - решетка, а дальше 6 шестандцатиричных цифр. Если передавать число, то оно может быть от 0 до 20 включительно. 20 соответствует черному цвету. Остальные номера соответсвуют этим цветам: https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20\r\n* **Area.Color(Number or String)**, аргумент необязателен. Если он есть, тобудет установлен указанный цвет, как в `.setColor(Number or String)`. Если его нет, то будет возвращен текущий цвет в формате rgb.\r\n\r\n---\r\n\r\n* **Area.getColour()**, алиас для `.getColor()`\r\n* **Area.setColour(Number or String)**, алиас для `.setColor(Number or String)`\r\n* **Area.Colour(Number or String)**, алиас для `.Color(Number or String)`\r\n \r\n---\r\n\r\n* **Area.setFill(Number or String)**, устанавливает цвет заливки области. Работает также, как и `.setColor`\r\n* **Area.getFill()**, возвращает цвет заливки области\r\n* **Area.Fill(String or Number)**, принимает *необязательный* аргумент. Если он есть, то устанавливает указанный цвет, иначе возвращает текущий цвет.\r\n\r\n---\r\n\r\n* **Area.setFillOpacity(Number)**, принимает число от 0 до 1 и устанавливает указанную прозрачность заливки.\r\n* **Area.getFillOpacity()**, возвращает текущую прозрачность заливки.\r\n* **Area.FillOpacity(Number)**, принимает *необязательный* аргумент. Если он есть, то устанваливает указанную прозрачность, иначе возвращает текущую.\r\n \r\n---\r\n\r\n* **Area.getStrokeWidth()**, вернет текущую толщину границы области.\r\n* **Area.setStrokeWidth(Number)**, установит указанную толщину.\r\n* **Area.StrokeWidth(Number)**, если передать *необязательный* аргумент, то установит толщину. Если не указывать, то вернет текущую толщину.\r\n\r\n---\r\n\r\n##### Plotter.addPoint(x, y, Object)\r\nРисует точку по указанным координатам. Третьеим *необязательным* аргументом можно передать некоторые свойства:\r\n*  **movable: false**, можно ли точку перетаскивать мышкой. По-умолчанию нельзя.\r\n*  **color: 6**\r\n*  **size: 3**, размер точки\r\n\r\n##### Методы Point\r\n* **Point.setSize(size)**, меняет размер точки. Можно передать либо неотрицательное число, либо одну из четырех строк: \"large\", \"medium\", \"small\", \"tiny\".\r\n* **Point.getSize()**, возвращает текущий размер\r\n* **Point.Size(size)**, принимает *необязательный* аргумент. Если он есть, то устанавливает размер, иначе возвращает текущий размер.\r\n\r\n---\r\n\r\n* **Point.getX()**\r\n* **Point.setX(x)**\r\n* **Point.X(x)**, аргумент необязательный.\r\n\r\n---\r\n\r\n* **Point.getY()**\r\n* **Point.setY(y)**\r\n* **Point.Y(y)**, аргумент необязательный.\r\n\r\n---\r\n\r\n* **Point.getColor()**, вернет текущий цвет в формате rgb.\r\n* **Point.setColor(Number or String)**, установит указанный цвет. Если передавать строку, то она должна быть в формате rgb, то есть первый символ - решетка, а дальше 6 шестандцатиричных цифр. Если передавать число, то оно может быть от 0 до 20 включительно. 20 соответствует черному цвету. Остальные номера соответсвуют этим цветам: https://github.com/mbostock/d3/wiki/Ordinal-Scales#category20\r\n* **Point.Color(Number or String)**, аргумент необязателен. Если он есть, тобудет установлен указанный цвет, как в `.setColor(Number or String)`. Если его нет, то будет возвращен текущий цвет в формате rgb.\r\n\r\n---\r\n\r\n* **Point.getColour()**, алиас для `.getColor()`\r\n* **Point.setColour(Number or String)**, алиас для `.setColor(Number or String)`\r\n* **Point.Colour(Number or String)**, алиас для `.Color(Number or String)`\r\n \r\n---\r\n\r\n##### Остальные методы Plotter\r\nПомимо рисования объектов, Plotter еще отвечает за учет всех созданных объектов. Если нужно удалить какой-нибудь, то нужно вызвать метод `.remove`:\r\n\r\n```javascript\r\n    var point = plotter.addPoint(1, 1);\r\n    plotter.remove(point);\r\n```\r\n\r\nВ некоторых случаях может помочь вызов методов `Plotter.draw()` или, что то же самое, `Plotter.redraw()`. В текущей версии их использовать не нужно.\r\nТакже можно узнать id элемента, к которому привязан график: `Plotter.getID()`\r\n\r\n# PlotContainer, несколько графиков на одной странице\r\nКак и Plotter, PlotContainer является глобальным объектом. Он служит для того, чтобы DOM-элемент с указанным ID работал в качестве контейнера для других DOM-элементов, которые, в свою очередь могут содержать либо графики, либо произвольный\r\nhtml-код.\r\n\r\nПроще говорить, что PlotContainer - это контейнер, который хранит в себе несколько Plotter'ов.\r\n\r\n\r\n`Plotter PlotContainer.addPlot(options)` добавляет в DOM-контейнер график и возвращает его. Возвращает то же самое, что и конструктор Plotter. Опции те же самые, что и у Plotter.\r\n\r\n\r\n`DOM_ID PlotContainer.addEmptyDiv()` создает в контейнере пустой <div> и возвращает его ID. Можно использовать, например, для дальнейшей работы с Controls.\r\n\r\nИнициализация контейнера и создание графика в нем:\r\n\r\n```javascript\r\n    var container = new PlotContainer(\"plot\");\r\n\r\n    var plotter = container.addPlot();\r\n```\r\n\r\nВторой график можно создать также, как и первый:\r\n\r\n```javascript\r\n    var plotter2 = container.addPlot();\r\n```\r\n\r\nКроме того, в метод можно передавать опции, как это делает с конструктором Plotter:\r\n```javascript\r\n var plotter3 = container.addPlot({\r\n   width: 400,\r\n   height: 400\r\n  });\r\n ```\r\n\r\n#Примеры\r\nИх можно посмотреть в папке scripts. В index.html можно менять имя подключаемого файла, чтобы смотреть разные примеры.\r\n",
  "readmeFilename": "README.md"
}
